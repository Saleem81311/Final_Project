/*****************************************************************************************************************
 * Author: Tennison Hoffmann
 * Date: 10/21/2021
 * Group: Figurski, Griggs-Taylor, Hoffmann
 * Description: Program to print group names and class section to LCD, then scroll a phrase from right to left
 * across screen.
 *****************************************************************************************************************/

#include "msp.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

//P4.7 to P4.4 are DB7 to DB4
//P4.2 is Enable
//P4.3 is RS
void SysTick_Init();
void pushNibble(uint8_t nibble);
void pulseEnablePin();
void intializeDisplay();
void delay_micro(unsigned micro);
void delay_ms(unsigned ms);
void pushByte(uint8_t byte);
void commandWrite(uint8_t command);
void dataWrite(uint8_t data);
void printString(char string[]);

float nADC, duty = 100;

void main(void){
    WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD;     // stop watchdog timer

    P4->SEL0 &= ~(0xFF);            //P4.1-P4.7 GPIO, Outputs, default of LOW
    P4->SEL1 &= ~(0xFF);
    P4->DIR  |=  (0xFF);
    P4->OUT  &= ~(0xFF);

    P8-> SEL0 |= BIT2;                              //lcd backlight PWM output
    P8-> SEL1 &=~ BIT2;
    P8-> DIR |= BIT2;                                 //sets pin 8.2 as timerA3.2

    P6-> SEL0 |= BIT1;                     //potentiometer input
    P6-> SEL1 |= BIT1;                       // configure pin 6.1 for A14 input
    P6-> DIR  &= ~BIT1;                      //Analog INPUT

    SysTick_Init();
    intializeDisplay();

    while(1)
    {
    }
}
void intializeDisplay()             //function to initialize lcd
{
    commandWrite(3);
    delay_ms(10);
    commandWrite(3);
    delay_micro(200);
    commandWrite(3);
    delay_ms(10);

    commandWrite(2);
    delay_micro(100);
    commandWrite(2);
    delay_micro(100);

    commandWrite(8);
    delay_micro(100);
    commandWrite(0x0C);
    delay_micro(100);
    commandWrite(1);
    delay_micro(100);
    commandWrite(6);
    delay_ms(10);
}

void SysTick_Init(){                    //initialize system timer
    SysTick->CTRL &= ~BIT0;             //clears enable to stop the counter
    SysTick->LOAD = 0x00FFFFFF;         //sets the period... note: (3006600/1000 - 1) = 1ms
    SysTick->VAL = 0;                   //clears the value
    SysTick->CTRL = 0x00000005;         //enable SysTick, no uint8_terrupts
}

void pulseEnablePin()                   //pulses enable pin
{
    P4->OUT |=  BIT2;
    delay_ms(10);
    P4->OUT &= ~BIT2;
}

void delay_micro(unsigned micro){       //delays desired time in us
    SysTick->LOAD = micro*3 - 1;
    SysTick->VAL = 0;
    SysTick->CTRL = 5;
    while(!(SysTick->CTRL & BIT(16)));
}

void delay_ms(unsigned ms){             //delays desired time in ms
    SysTick->LOAD = ms*3000 - 1;
    SysTick->VAL = 0;
    SysTick->CTRL = 5;
    while(!(SysTick->CTRL & BIT(16)));
}

void pushNibble(uint8_t nibble)         //pushes 4 bits onto pins
{
    P4->OUT &= (0x0F);
    P4->OUT |= ((nibble & 0x0F) << 4);
    pulseEnablePin();
}

void pushByte(uint8_t byte){            //splits byte into 2 nibbles and sends to push nibble
    pushNibble(byte >> 4);
    pushNibble(byte & (0x0F));
}

void commandWrite(uint8_t command){     //sends byte of command to lcd
    P4->OUT &= ~BIT3;
    delay_ms(10);
    pushByte(command);
}

void dataWrite(uint8_t data){           //sends byte of data to lcd
    P4->OUT |= BIT3;
    delay_ms(10);
    pushByte(data);
}

void printString(char string[]){        //prints a string of characters
    int i;
    for (i = 0; i < (strlen(string)); i++){
            dataWrite(string[i]);
    }
}
